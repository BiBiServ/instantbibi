<?xml version="1.0" encoding="UTF-8"?>
<!-- 
    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
    
    Copyright 2011 BiBiServ Curator Team, http://bibiserv.cebitec.uni-bielefeld.de,
    All rights reserved.
    
    The contents of this file are subject to the terms of the Common
    Development and Distribution License("CDDL") (the "License"). You
    may not use this file except in compliance with the License. You can
    obtain a copy of the License at http://www.sun.com/cddl/cddl.html
    
    See the License for the specific language governing permissions and
    limitations under the License.  When distributing the software, include
    this License Header Notice in each file.  If applicable, add the following
    below the License Header, with the fields enclosed by brackets [] replaced
    by your own identifying information:
    
    "Portions Copyrighted 2011 BiBiServ Curator Team, http://bibiserv.cebitec.uni-bielefeld.de"
    
    Contributor(s): Jan Krueger
    
    Authors: Jan Krueger, jkrueger(at)cebitec.uni-bielefeld.de
             Armin Toepfer, atoepfer(at)techfak.uni-bielefeld.de (initial release based on make)
     -->


<project name="instantbibi" basedir="." default="help" xmlns:antcontrib="antlib:net.sf.antcontrib" xmlns:ivy="antlib:org.apache.ivy.ant">
    
   <!-- load antlib for ant-contrib and ivy -->
    
    <path id="antlib">
        <fileset dir=".ant/lib">
            <include name="**/*.jar"/>
        </fileset>
    </path>
    
    <taskdef uri="antlib:net.sf.antcontrib"
             resource="net/sf/antcontrib/antlib.xml"
             classpathref="antlib"/>
    
    <taskdef uri="antlib:org.apache.ivy.ant"
             resource="org/apache/ivy/ant/antlib.xml"
             classpathref="antlib"/>
               
   <!-- environment variables -->
    
    <property environment="env"/>
    
    <!-- following properties can be overwritten calling ant with -Dpropertyname=propertyvalue --> 
    
    <property name="bibiserv_url" value="http://bibiserv.cebitec.uni-bielefeld.de"/>
    <property name="glassfish_url" value="http://download.java.net/glassfish/3.1.1/release"/>
    <property name="base.dir" value="/tmp/${user.name}"/>
    <property name="spool.dir" value="${base.dir}/spool"/>
    <property name="exec.dir" value="${base.dir}/bin"/>
    <property name="tool.dir" value="${base.dir}/gentools"/> <!-- directory where to create tools from description --> 
    <property name="portbase" value="8000"/> 
     
    <property name="ant.lib.path" refid="antlib"/> <!-- for external ant calls -->
    
    <property name="lib.dir" value=".lib"/> <!-- dir for ivy libs -->
    
    <!-- Script to calculate the java db port and set the variable ${db.port} from the given portbase -->
    <scriptdef name="setPorts" language="javascript">
        <attribute name="portbase"/>
        <![CDATA[
        project.setNewProperty("db.port", (parseInt(attributes.get("portbase"))+27));
        project.setNewProperty("admin.port", (parseInt(attributes.get("portbase"))+48));
        project.setNewProperty("http.port", (parseInt(attributes.get("portbase"))+80));
        project.setNewProperty("https.port", (parseInt(attributes.get("portbase"))+81));
    ]]>
    </scriptdef>

    <target name="instant" description="create/configure GF, deploys bibimainapp using stable resources">
        <antcall target=".get"/>
        <antcall target=".unzip"/>
        <antcall target=".create.config"/>
        <antcall target=".create.domain"/>
        <antcall target="start"/>
    </target>
    
    
    <target name="instant.dev" description="setup a complete BiBiServ2 environment using latest developer resources from mercurial repository!">
        <antcall target=".mercurial"/>
        <antcall target=".create.config"/>
        <antcall target=".create.domain"/>
        <antcall target="start"/>
    </target>
    
    <target name="update.dev" description="updates appserver_config, bibimainapp, base from mercurial" depends=".mercurial"/>
    
    <target name="install.resource" description="install instantbibi as resource on bibiserv, could only be run with developer version from mercurial repository">
        
        <available property="is.developer.version" file=".hg/hgrc" value="true"/>
        
        <antcontrib:if>
            <isset property="is.developer.version"/>
            <antcontrib:then>
                <mkdir dir="dist"/>
                <zip destfile="dist/instantbibi.zip"  >
                    <zipfileset dir="." includes=".ant/lib/*" prefix="instantbibi"/>
                    <zipfileset file="build.xml" prefix="instantbibi"/>
                    <zipfileset file="README.1st" prefix="instantbibi"/>
                </zip>
                
                <!-- check if ${ssh.key} and ${ssh.user} is set -->
                <fail unless="ssh.user"
                    message="The Target &lt;install&gt; uses ssh key based authentication. Give the ssh user for ${ssh.host} as property 'ssh.user' as argument to the ant call!"/>
                <fail unless="ssh.key"
                    message="The Target &lt;install&gt; uses ssh key based authentication. Give the location of your private key as property 'ssh.key' and optional a passphrase as property 'ssh.passphrase' as argument to the ant call!"/>
                
                <!-- load ssh specify setting from bibiserv -->
                <property url="http://bibiserv.techfak.uni-bielefeld.de/ivy-rep/ivy_ssh.properties"/>
                
                
                <!-- copy local ivy-rep to bibiserv using porta.techfak.uni-bielefeld.de -->
                <scp todir="${ssh.user}@${ssh.host}:${ssh.basedir}/resources" passphrase="${ssh.passphrase}"
                    keyfile="${ssh.key}">
                    <fileset file="dist/instantbibi.zip"/>
                </scp>
            </antcontrib:then>
            <antcontrib:else>
                <echo>Target can only be run with developer version from mercurial repository!</echo>
            </antcontrib:else>
        </antcontrib:if>
    </target>
    
    
    <target name="install.antlib" description="install needed ant libraries to ${user.home}/.ant/lib - mandatory for developer">
        <mkdir dir="${user.home}/.ant/lib"/>
        <copy todir="${user.home}/.ant/lib">
            <fileset dir=".ant/lib" includes="*.jar"/>
        </copy>
    </target>
  
    <target name="start" description="start glassfish/database and deploys bibimainapp">
        <ant antfile="build.xml" target="start" dir="appserver_config"/>
        <antcall target="deploy"/>
        <echo>Server started and BiBiMainApp deployed ...</echo>
    </target>
    
    <target name="deploy" depends=".port.setting" description="(re)deploys bibimainapp"> 
        <antcontrib:if>
            <available file="bibimainapp"/>  
            <antcontrib:then>
                <ant antfile="build.xml" target="dist" dir="bibimainapp"/> 
                 <exec executable="${basedir}/glassfish3/bin/asadmin" failifexecutionfails="true" failonerror="true">
                    <arg value="--user=admin"/>
                    <arg value="--passwordfile=appserver_config/local.passwordfile"/>
                    <arg value="--port=${admin.port}"/>
                    <arg value="--host=localhost"/>
                    <arg value="deploy"/>
                    <arg value="--force"/>
                    <arg value="--contextroot=/"/>
                    <arg value="bibimainapp/dist/bibimainapp.war"/>       
                </exec>               
            </antcontrib:then>
            <antcontrib:else>
                <exec executable="${basedir}/glassfish3/bin/asadmin" failifexecutionfails="true" failonerror="true">
                    <arg value="--user=admin"/>
                    <arg value="--passwordfile=appserver_config/local.passwordfile"/>
                    <arg value="--port=${admin.port}"/>
                    <arg value="--host=localhost"/>
                    <arg value="deploy"/>
                    <arg value="--force"/>
                    <arg value="--contextroot=/"/>
                    <arg value=".cache/bibimainapp.war"/>       
                </exec>
            </antcontrib:else>
        </antcontrib:if>    
    </target>
    
    <target name="stop" description="stops glassfish and database">
        <ant antfile="build.xml" target="stop"  dir="appserver_config" />
    </target>
    
    
    
    <target name="wipe" depends="stop" description="stops GF and clean up domain including spool and exec dir!">
        <delete dir="${spool.dir}"/>
        <delete dir="${exec.dir}"/>
        <delete dir="${base.dir}/bibidomain"/>
        <delete dir="${tools.dir}"/>
    </target>
    
    <target name="wipe.all" depends="wipe" description="depends on wipe and remove install directories">
        <delete dir="appserver_config"/>
        <delete dir="glassfish3"/>
        <delete dir="base"/>
    </target>
    
    
    
    <!-- ######################## create and configure new domain   ########################### -->

    <target name=".port.setting">
        <setPorts portbase="${portbase}"/>
        <echo>used ports:</echo>
        <echo>portbase   : ${portbase}</echo>
        <echo>db.port    : ${db.port} (if not set : portbase + 27)</echo>
        <echo>admin.port : ${admin.port} (if not set: portbase + 48)</echo>
        <echo>http.port  : ${http.port}</echo>
        <echo>https.port : ${https.port}</echo>
        
    </target>
    
    <target name=".create.domain" depends=".check, .create.config, .create.bibimainapp.pwfile">
        <available file="${base.dir}/bibidomain" property="domain.present"/>
        <antcontrib:if>
            <isset property="domain.present"/>
            <antcontrib:then>
                <echo>found previous installed and configured domain ...</echo>
            </antcontrib:then>
            <antcontrib:else>
                <ant antfile="build.xml" target="configure" dir="appserver_config">
                    <property name="ant.library.path" value="${ant.lib.path}"/>
                </ant>
            </antcontrib:else>
        </antcontrib:if>
    </target>
    
    <target name=".create.config" depends=".port.setting">  
        <antcontrib:if>
            <not>
                <available file="appserver_config/local.configuration" property="config.present" value="true"/>
            </not>
            <antcontrib:then>
                <echo>create configuration </echo>
                <propertyfile file="appserver_config/local.configuration">
                    <entry key="catalina.home" value="${basedir}/glassfish3"/>
                    <entry key="domain.dir" value="${base.dir}"/>
                    <entry key="domain" value="bibidomain"/>
                    <entry key="admin.user" value="admin"/>
                    <entry key="spool.dir" value="${spool.dir}"/>
                    <entry key="executable.dir" value="${exec.dir}"/>
                    <entry key="server.portbase" value="${portbase}"/>
                    <entry key="db.port" value="${db.port}"/>
                    <entry key="admin.port" value="${admin.port}"/>
                </propertyfile>
                <propertyfile file="appserver_config/local.passwordfile">
                    <entry key="AS_ADMIN_PASSWORD" value="admin"/>
                    <entry key="AS_ADMIN_MASTERPASSWORD" value="changeit"/>
                </propertyfile>
            </antcontrib:then>
            <antcontrib:else>
                <echo>found previous configuration ...</echo>
            </antcontrib:else>
        </antcontrib:if>
    </target>
    
    <target name=".create.bibimainapp.pwfile" depends=".port.setting">
        <tstamp>
            <format property="CURRENT" pattern="MMddyyyy_hhmm"/>
        </tstamp>
        <antcontrib:if>
            <available file="${user.home}/.bibiserv2_manager"/>
            <antcontrib:then>
                <input message="Found previous BiBiServ2 ManagerClient configuration (${user.home}/.bibiserv2_manager)!\nShould this configuration overwritten - previous configuration will be moved to ${user.home)/.bibiserv2_manager.${CURRENT} (y/n)?"
                validargs="y,n" addproperty="do.overwrite"/>  
            </antcontrib:then>  
        </antcontrib:if>     
        <antcontrib:if>
            <or>
                <not>
                    <available file="${user.home}/.bibiserv2_manager"/>
                </not>
                <and>
                    <isset property="do.overwrite"/>
                    <equals forcestring="yes" trim="yes" arg1="${do.overwrite}" arg2="y"/>
                </and>
            </or>
            <antcontrib:then>
                <move file="${user.home}/.bibiserv2_manager" tofile="${user.home}/.bibiserv2_manager.${CURRENT}" failonerror="false"/>
                <propertyfile file="${user.home}/.bibiserv2_manager">
                    <entry key="role" value="testadmin"/>
                    <entry key="password" value="simplepassword"/>
                    <entry key="port" value="${http.port}"/>
                    <entry key="server" value="localhost"/>
                </propertyfile>
            </antcontrib:then>
        </antcontrib:if>
    </target>
    
    <target name=".check">
      
        
        <antcontrib:if>
                <available file="${base.dir}"/>
            <antcontrib:then>
                <echo>${base.dir} exist ... </echo>
                <touch file="${base.dir}/ok"/>
                
                
            </antcontrib:then>
            <antcontrib:else>
                <echo>Create ${base.dir} ...</echo>
                <mkdir dir="${base.dir}"/>
            </antcontrib:else>
            
        </antcontrib:if>
        
    </target>
    
    
    
    
    <!-- ######################## mercurial clone/update ############################## -->
    
    <target name=".mercurial">
       <checkandclone project="appserver_config"/>
       <checkandclone project="base"/>
       <checkandclone project="bibimainapp"/>
    </target>
    
    
    <macrodef name="checkandclone" description="clone / update mercurial">
        <attribute name="project"/>
        <attribute name="url" default="ssh://hg@hg.cebitec.uni-bielefeld.de"/>
        <attribute name="path" default="/bibiadm/bibiserv2/main"/>
        
        
        <sequential>
            <antcontrib:if>
                <available file="@{project}"/>     
                <antcontrib:then>
                    <antcontrib:if>                       
                        <available file="@{project}/.hg"/>
                        <antcontrib:then>
                            <exec executable="hg" dir="@{project}">
                                <arg value="pull"/>
                            </exec>
                            <exec executable="hg" dir="@{project}">
                                <arg value="update"/>
                            </exec>      
                        </antcontrib:then>
                        <antcontrib:else>
                            <echo>Existing @{project} without mercurial support found ...</echo>
                        </antcontrib:else>
                    </antcontrib:if>
                </antcontrib:then>
                <antcontrib:else>
                  <exec executable="hg">
                      <arg value="clone"/>
                      <arg value="@{url}/@{path}/@{project}"/>
                  </exec>
                </antcontrib:else>
            </antcontrib:if> 
        </sequential>
    </macrodef>
    
    
    <!-- ######################## unzip downloaded sources  ########################### -->
    
    <target name=".unzip" >
        <!-- glassfish -->
        <unzipResource resource=".cache/glassfish-3.1.1.zip" depdir="glassfish3"/>
        <chmod perm="ugo+rx" file="glassfish3/bin/asadmin"/>
        <chmod perm="ugo+rx" file="glassfish3/javadb/bin/ij"/>
        <!-- appserver config -->
        <unzipResource resource=".cache/appserver_config.zip" depdir="appserver_config"/>
        <!-- base -->
        <unzipResource resource=".cache/base.zip" depdir="base"/>
    </target>
           
    <target name=".unzip.glassfish" depends=".get">            
        <available file="glassfish3/bin/asadmin" property="gf.present"/>    
        <antcontrib:if>
             <isset property="gf.present"/>
            <antcontrib:then>
                <echo>found previous glassfish3 installation ...</echo>    
            </antcontrib:then>
            <antcontrib:else>
                <unzip src=".cache/glassfish.zip" dest="."/>     
                <chmod perm="ugo+rx" file="glassfish3/bin/asadmin"/>
                <chmod perm="ugo+rx" file="glassfish3/javadb/bin/ij"/>        
            </antcontrib:else>
        </antcontrib:if>
    </target>
    
    <macrodef name="unzipResource">
        <attribute name="resource"/>
        <attribute name="depdir"/>
        <sequential>
            <antcontrib:if>
                <available file="@{depdir}"/>
                <antcontrib:then>
                    <echo>found previous ${depdir} installation ...</echo>
                </antcontrib:then>
                <antcontrib:else>
                    <unzip src="@{resource}" dest="."/>
                </antcontrib:else>
            </antcontrib:if>
        </sequential>
    </macrodef>
    
    <!-- ######################## targets to download sources from server ########################### -->  
    <target name=".get">
        <checkAndDownload resource="bibimainapp.war" url="${bibiserv_url}/resources"/>
        <checkAndDownload resource="appserver_config.zip" url="${bibiserv_url}/resources"/>
        <checkAndDownload resource="base.zip" url="${bibiserv_url}/resources"/>
        <checkAndDownload resource="glassfish-3.1.1.zip" url="${glassfish_url}" checksum="bf92c2c99b3d53b83bbc8c7e2124a897"/>
    </target> 
      
    <macrodef name="checkAndDownload"
        description="check if a resource is cached and up to date, otherwise download it from given url">
        <attribute name="resource"/>
        <attribute name="url"/>
        <attribute name="checksum" default=""/>
        <sequential>
            <antcontrib:if>
                <available file=".cache/@{resource}"/>
                <antcontrib:then>
                    <antcontrib:if>
                        <equals arg1="@{checksum}" arg2="" trim="true" forcestring="true"/>
                        <antcontrib:then>
                            <loadresource property="url.md5">
                                <url url="@{url}/@{resource}.md5"/>
                            </loadresource>
                        </antcontrib:then>
                        <antcontrib:else>
                            <property name="url.md5" value="@{checksum}"/>
                        </antcontrib:else>
                    </antcontrib:if>
                    <checksum algorithm="md5" format="CHECKSUM" file=".cache/@{resource}"
                        property="local.md5"/>
                    <antcontrib:if>
                        <equals trim="yes" forcestring="yes" arg1="${local.md5}" arg2="${url.md5}"/>
                        <antcontrib:then>
                            <echo>Cached resource '@{resource}' is up-to-date.</echo>
                        </antcontrib:then>
                        <antcontrib:else>
                            <echo>Cached resource is out-of-date. Update resource from
                                @{url}/resources/.</echo>
                            <delete file=".cache/@{resource}"/>
                            <get src="@{url}/@{resource}" dest=".cache/@{resource}"/>
                        </antcontrib:else>
                    </antcontrib:if>
                </antcontrib:then>
                <antcontrib:else>
                    <echo>Download resource @{resource} from @{url}/resources/</echo>
                    <mkdir dir=".cache"/>
                    <get src="@{url}/@{resource}" dest=".cache/@{resource}"/>
                </antcontrib:else>
            </antcontrib:if>
        </sequential>
    </macrodef>
     
    <!-- ######################## help ########################### -->
    <target name="help" description="print out a help message (same as ant -p)">
        <echo>Main targets:

deploy            (re)deploys bibimainapp
help              print out a help message (same as ant -p)
install.antlib    install needed ant libraries to ${user.home}/.ant/lib - mandatory for developer
install.dialign   download dialign.bar and dialign.binary and deploy both
install.guugle    download guugle.bar and guugle.binary and deploy both
install.resource  install instantbibi as resource on bibiserv, could only be run with developer version from mercurial repository
instant           create/configure GF, deploys bibimainapp using stable resources
instant.dev       setup a complete BiBiServ2 environment using latest developer resources from mercurial repository!
start             start glassfish/database and deploys bibimainapp
stop              stops glassfish and database
update.dev        updates appserver_config, bibimainapp, base from mercurial
wipe              stops GF and clean up domain including spool and exec dir!
wipe.all          depends on wipe and remove install directories

Default target: help

Configuration can individualized setting properties, following properties
are supported :

name                | description                   | defaultvalue                   
bibiserv_url        | BiBiServ resource url         | ${bibiserv_url} 
glassfish_url       | GlassFish resource url        | ${glassfish_url} 
base.dir            | base dir                      | ${base.dir}  comment : /tmp/$${user.name} 
spool.dir           | spool dir                     | ${spool.dir} comment : $${base.dir}/spool
exec.dir            | executation dir (for binaries)| ${exec.dir}  comment : $${base.dir}/bin
tool.dir            | generated tool project dir    | ${tool.dir}  comment : $${base.dir}/gentools 
portbase            | glassfish port base           | 8000
                    | (http: +80, https: +81)       |         
db.port             | database port                 | 8027 comment : $${portbase} + 27
admin.port          | administration port           | 8048 comment : $${portbase} + 48

Example :

ant -Dportbase=18000 -Dbase.dir=/vol/bibiserv2 instant

Setup a new bibiserv2 instance with port base 18000 (-> http:18080, https:18081, admin:18048, db:18027)
and .vol/bibiserv2 as base dir.
        </echo>  
    </target> 
    
    <!-- ######################## tools ########################### -->
    <target name="install.guugle" description="download guugle.bar and guugle.binary and deploy both" depends=".resolve">
        <install.tool name="guugle"/>
    </target>
    
    <target name="install.dialign" description="download dialign.bar and dialign.binary and deploy both" depends=".resolve">
        <install.tool name="dialign"/>
    </target>
   
    <macrodef name="install.tool" description="deploy a tool on server and install binaries into server tools dir">
       <attribute name="name"/>
       <sequential>
           <!-- determine os and machine architecture -->
           <exec executable="uname" outputproperty="os"/>
           <exec executable="uname" outputproperty="arch">
               <arg value="-m"/>
           </exec>
           
           <!-- @TODO: check for supported os/arch are still missing -->            
           <mkdir dir=".tmp.@{name}"/>
           <get src="${bibiserv_url}/resources/apps/@{name}.bar" dest=".tmp.@{name}"/>
           <get src="${bibiserv_url}/resources/apps/@{name}.${os}.${arch}.zip" dest=".tmp.@{name}"/>
           
           <!-- unzip bin to tools.dir -->
           <unzip src=".tmp.@{name}/@{name}.${os}.${arch}.zip" dest="${exec.dir}"/>
           
           <!-- deploy bar archive to server -->
            <java classname="de.unibi.cebitec.bibiserv.client.manager.ManagerClient" fork="true">
                        <classpath>
                                <fileset dir="lib">
                                        <include name="*.jar"/>
                                </fileset>
                        </classpath>
                        <arg value="deploy"/>
                <arg value=".tmp.@{name}/@{name}.bar"/>
             </java>

           
       </sequential>
       
    </macrodef>
    
    <!-- ######################## ivy dependencies ########################### -->
    
    <!-- use ivy to resolve  library dependencies -->
    <target name=".resolve" >
        <ivy:settings url="http://bibiserv.techfak.uni-bielefeld.de/ivy-rep/ivysettings.xml"/>
        <ivy:retrieve />
    </target>
    
    
       
</project>
