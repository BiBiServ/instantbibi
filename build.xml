<?xml version="1.0" encoding="UTF-8"?>
<!-- 
    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
    
    Copyright 2011 BiBiServ Curator Team, http://bibiserv.cebitec.uni-bielefeld.de,
    All rights reserved.
    
    The contents of this file are subject to the terms of the Common
    Development and Distribution License("CDDL") (the "License"). You
    may not use this file except in compliance with the License. You can
    obtain a copy of the License at http://www.sun.com/cddl/cddl.html
    
    See the License for the specific language governing permissions and
    limitations under the License.  When distributing the software, include
    this License Header Notice in each file.  If applicable, add the following
    below the License Header, with the fields enclosed by brackets [] replaced
    by your own identifying information:
    
    "Portions Copyrighted 2011 BiBiServ Curator Team, http://bibiserv.cebitec.uni-bielefeld.de"
    
    Contributor(s): Jan Krueger
    
    Authors: Jan Krueger, jkrueger(at)cebitec.uni-bielefeld.de
             Armin Toepfer, atoepfer(at)techfak.uni-bielefeld.de (initial release based on make)
     -->


<project name="instantbibi" basedir="." default="help" xmlns:antcontrib="antlib:net.sf.antcontrib" xmlns:ivy="antlib:org.apache.ivy.ant">
    
   <!-- load antlib for ant-contrib and ivy -->
    
    <path id="antlib">
        <fileset dir=".ant/lib">
            <include name="**/*.jar"/>
        </fileset>
    </path>
    
    <taskdef uri="antlib:net.sf.antcontrib"
             resource="net/sf/antcontrib/antlib.xml"
             classpathref="antlib"/>
    
    <taskdef uri="antlib:org.apache.ivy.ant"
             resource="org/apache/ivy/ant/antlib.xml"
             classpathref="antlib"/>
             
    
   
   <!-- environment variables -->
    
    <property environment="env"/>
    
    <property name="bibiserv_url" value="http://bibiserv.cebitec.uni-bielefeld.de"/>
    <property name="glassfish_url" value="http://download.java.net/glassfish/3.1.1/release/glassfish-3.1.1.zip"/>
    <property name="base.dir" value="/tmp/${user.name}"/>
    <property name="spool.dir" value="${base.dir}/spool"/>
    <property name="exec.dir" value="${base.dir}/bin"/>
    <property name="tool.dir" value="${base.dir}/gentools"/> <!-- directory where to create tools from description --> 
    
    
    <property name="portbase" value="8000"/> <!-- can be overwritten calling ant with -Dportbase=XXXX -->
 
    
    <property name="ant.lib.path" refid="antlib"/> <!-- for external ant calls -->
    
    <!-- Script to calculate the java db port and set the variable ${db.port} from the given portbase -->
    <scriptdef name="setPorts" language="javascript">
        <attribute name="portbase"/>
        <![CDATA[
        project.setNewProperty("db.port", (parseInt(attributes.get("portbase"))+27));
        project.setNewProperty("admin.port", (parseInt(attributes.get("portbase"))+48));
    ]]>
    </scriptdef>

   

    <target name="instant" description="create/configure GF, deploys bibimainapp using stable resources">
        <antcall target=".get"/>
        <antcall target=".unzip"/>
        <antcall target=".create.config"/>
        <antcall target=".create.domain"/>
        <antcall target="start"/>
    </target>
    
    
    <target name="instant.dev" description="setup a complete BiBiServ2 environment using latest developer resources from mercurial repository!">
        <echo>Not Yet Implemented!</echo>
    </target>
    
    <target name="install.resource" description="install instantbibi as resource on bibiserv, could only be run with developer version from mercurial repository">
        
        <available property="is.developer.version" file=".hg/hgrc" value="true"/>
        
        <antcontrib:if>
            <isset property="is.developer.version"/>
            <antcontrib:then>
                <mkdir dir="dist"/>
                <zip destfile="dist/instantbibi.zip"  >
                    <zipfileset dir="." includes=".ant/lib/*" prefix="instantbibi"/>
                    <zipfileset file="build.xml" prefix="instantbibi"/>
                    <zipfileset file="README.1st" prefix="instantbibi"/>
                </zip>
                
                <!-- check if ${ssh.key} and ${ssh.user} is set -->
                <fail unless="ssh.user"
                    message="The Target &lt;install&gt; uses ssh key based authentication. Give the ssh user for ${ssh.host} as property 'ssh.user' as argument to the ant call!"/>
                <fail unless="ssh.key"
                    message="The Target &lt;install&gt; uses ssh key based authentication. Give the location of your private key as property 'ssh.key' and optional a passphrase as property 'ssh.passphrase' as argument to the ant call!"/>
                
                <!-- load ssh specify setting from bibiserv -->
                <property url="http://bibiserv.techfak.uni-bielefeld.de/ivy-rep/ivy_ssh.properties"/>
                
                
                <!-- copy local ivy-rep to bibiserv using porta.techfak.uni-bielefeld.de -->
                <scp todir="${ssh.user}@${ssh.host}:${ssh.basedir}/resources" passphrase="${ssh.passphrase}"
                    keyfile="${ssh.key}">
                    <fileset file="dist/instantbibi.zip"/>
                </scp>
            </antcontrib:then>
            <antcontrib:else>
                <echo>Target can only be run with developer version from mercurial repository!</echo>
            </antcontrib:else>
        </antcontrib:if>
    </target>
    
    
    <target name="install.antlib" description="install needed ant libraries to ${user.home}/.ant/lib - mandatory for developer">
        <mkdir dir="${user.home}/.ant/lib"/>
        <copy todir="${user.home}/.ant/lib">
            <fileset dir=".ant/lib" includes="*.jar"/>
        </copy>
    </target>
  
    <target name="start" description="start glassfish/database and deploys bibimainapp">
        <ant antfile="build.xml" target="start" dir="appserver_config"/>
        <antcall target="deploy"/>
        <echo>Server started and BiBiMainApp deployed ...</echo>
    </target>
    
    <target name="deploy" depends=".port.setting" description="(re)deploys bibimainapp">
        <exec executable="${basedir}/glassfish3/bin/asadmin" failifexecutionfails="true" failonerror="true">
            <arg value="--user=admin"/>
            <arg value="--passwordfile=appserver_config/local.passwordfile"/>
            <arg value="--port=${admin.port}"/>
            <arg value="--host=localhost"/>
            <arg value="deploy"/>
            <arg value="--force"/>
            <arg value="--contextroot=/"/>
            <arg value=".cache/bibimainapp.war"/>       
        </exec>
    </target>
    
    <target name="stop" description="stops glassfish and database">
        <ant antfile="build.xml" target="stop"  dir="appserver_config"/>
    </target>
    
    <target name="wipe" depends="stop" description="stops GF and clean up domain including spool and exec dir!">
        <delete dir="${spool.dir}"/>
        <delete dir="${exec.dir}"/>
        <delete dir="${base.dir}/bibidomain"/>
        <delete dir="${tools.dir}"/>
    </target>
    
    <target name="wipe.all" depends="wipe" description="depends on wipe and remove install directories">
        <delete dir="appserver_config"/>
        <delete dir="glassfish3"/>
    </target>
    
    <!-- ######################## create and configure new domain   ########################### -->

    <target name=".port.setting">
        <setPorts portbase="${portbase}"/>
        <echo>used ports:</echo>
        <echo>portbase   : ${portbase}</echo>
        <echo>db.port    : ${db.port} (if not set : portbase + 27)</echo>
        <echo>admin.port : ${admin.port} (if not set: portbase + 48)</echo>
        
    </target>
    
    <target name=".create.domain" depends=".create.config">
        <available file="${base.dir}/bibidomain" property="domain.present"/>
        <antcontrib:if>
            <isset property="domain.present"/>
            <antcontrib:then>
                <echo>found previous installed and configured domain ...</echo>
            </antcontrib:then>
            <antcontrib:else>
                <ant antfile="build.xml" target="configure" dir="appserver_config">
                    <property name="ant.library.path" value="${ant.lib.path}"/>
                </ant>
            </antcontrib:else>
        </antcontrib:if>
    </target>
    
    <target name=".create.config" depends=".port.setting">
        <available file="appserver_config/local.configuration" property="config.present"
            value="true"/>
        <antcontrib:if>
            <not>
                <isset property="config.present"/>
            </not>
            <antcontrib:then>
                <echo>create configuration </echo>
                <propertyfile file="appserver_config/local.configuration">
                    <entry key="catalina.home" value="${basedir}/glassfish3"/>
                    <entry key="domain.dir" value="${base.dir}"/>
                    <entry key="domain" value="bibidomain"/>
                    <entry key="admin.user" value="admin"/>
                    <entry key="spool.dir" value="${spool.dir}"/>
                    <entry key="executable.dir" value="${exec.dir}"/>
                    <entry key="server.portbase" value="${portbase}"/>
                    <entry key="db.port" value="${db.port}"/>
                    <entry key="admin.port" value="${admin.port}"/>
                </propertyfile>
                <propertyfile file="appserver_config/local.passwordfile">
                    <entry key="AS_ADMIN_PASSWORD" value="admin"/>
                    <entry key="AS_ADMIN_MASTERPASSWORD" value="changeit"/>
                </propertyfile>
            </antcontrib:then>
            <antcontrib:else>
                <echo>found previous configuration ...</echo>
            </antcontrib:else>
        </antcontrib:if>
    </target>
    
  
    
    <!-- ######################## unzip downloaded sources  ########################### -->
    
    <target name=".unzip" depends=".unzip.glassfish,.unzip.appserver.config">
        
    </target>
    
    <target name=".unzip.glassfish" depends=".get.glassfish">            
        <available file="glassfish3/bin/asadmin" property="gf.present"/>    
        <antcontrib:if>
             <isset property="gf.present"/>
            <antcontrib:then>
                <echo>found previous glassfish3 installation ...</echo>    
            </antcontrib:then>
            <antcontrib:else>
                <unzip src=".cache/glassfish.zip" dest="."/>     
                <chmod perm="ugo+rx" file="glassfish3/bin/asadmin"/>
                <chmod perm="ugo+rx" file="glassfish3/javadb/bin/ij"/>        
            </antcontrib:else>
        </antcontrib:if>
    </target>
    
    <target name=".unzip.appserver.config" depends=".get.appserver.config">
        <available file="appserver_config/buildxml" property="ac.present"/>
        <antcontrib:if>
        <isset property="ac.present"/>
        <antcontrib:then>
            <echo>found previous appserver_config installation ...</echo>    
        </antcontrib:then>
        <antcontrib:else>
            <unzip src=".cache/appserver_config.zip" dest="."/>
        </antcontrib:else>
        </antcontrib:if>
    </target>
    
    
    
    <!-- ######################## targets to download sources from server ########################### -->
    
    <target name=".get" depends=".get.appserver.config,.get.base,.get.instantbibi.resources,.get.bibimainapp,.get.glassfish "/> 
    
    <target name=".get.appserver.config" depends=".check.appserver.config" unless=".available.appserver.config">
        
        
        <echo> Download ${bibiserv_url}/resources/appserver_config.zip</echo>
        <mkdir dir=".cache"/>
        <get src="${bibiserv_url}/resources/appserver_config.zip" dest=".cache/appserver_config.zip" verbose="yes"/>
    </target>
    
    <target name=".check.appserver.config">
        <condition property=".available.appserver.config">
            <available file=".cache/appserver_config.zip"/>        
        </condition>    
    </target>
    
    <target name=".get.base" depends=".check.base" unless=".available.base">
        <echo> Download ${bibiserv_url}/resources/base.zip (depending on your bandwidth this take a while)</echo>
        <mkdir dir=".cache"/>
        <get src="${bibiserv_url}/resources/base.zip" dest=".cache/base.zip" verbose="no"/>
    </target>
    
    <target name=".check.base">
        <condition property=".available.base">
            <available file=".cache/base.zip"/>        
        </condition>    
    </target>
    
    <target name=".get.instantbibi.resources" depends=".check.instantbibi.resources" unless=".available.instantbibi.resources">
        <echo> Download ${bibiserv_url}/resources/instantbibi_resources.zip</echo>
        <mkdir dir=".cache"/>
        <get src="${bibiserv_url}/resources/instantbibi_resources.zip" dest=".cache/instantbibi_resources.zip" verbose="yes"/>
    </target>
    
    <target name=".check.instantbibi.resources">
        <condition property=".available.instantbibi.resources">
            <available file=".cache/instantbibi_resources.zip"/>        
        </condition>    
    </target>
    
    <target name=".get.bibimainapp" depends=".check.bibimainapp" unless=".available.bibimainapp">
        <echo> Download ${bibiserv_url}/resources/bibimainapp.war</echo>
        <mkdir dir=".cache"/>
        <get src="${bibiserv_url}/resources/bibimainapp.war" dest=".cache/bibimainapp.war" verbose="yes"/>
    </target>
    
    <target name=".check.bibimainapp">
        <condition property=".available.bibimainapp">
            <available file=".cache/bibimainapp.war"/>        
        </condition>    
    </target>
    
    <target name=".get.glassfish" depends=".check.glassfish" unless=".available.glassfish">
        <echo> Download ${glassfish_url}</echo>
        <mkdir dir=".cache"/>
        <get src="${glassfish_url}" dest=".cache/glassfish.zip" verbose="yes"/>
    </target>
    
    <target name=".check.glassfish">
        <condition property=".available.glassfish">
            <available file=".cache/glassfish.zip"/>        
        </condition>    
    </target>
    
    <!-- ######################## targets to download sources from server ########################### -->
    <target name="help" description="print out a help message (same as ant -p)">
        <echo>Main targets:

 deploy       (re)deploys bibimainapp 
 help         print out a help message (same as ant -p)
 instant      create/configure GF, deploys bibimainapp using stable resources
 instant.dev  setup a complete BiBiServ2 environment using latest developer resources from mercurial repository!
 start        start glassfish/database and deploys bibimainapp
 stop         stops glassfish and database
 wipe         stops GF and clean up domain including spool and exec dir!
 wipe.all     depends on wipe and remove install directories
Default target: help
        </echo>  
    </target> 
   
       
</project>
