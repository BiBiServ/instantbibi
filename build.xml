<?xml version="1.0" encoding="UTF-8"?>
<!-- 
    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
    
    Copyright 2011-2016 BiBiServ Curator Team, http://bibiserv.cebitec.uni-bielefeld.de,
    All rights reserved.
    
    The contents of this file are subject to the terms of the Common
    Development and Distribution License("CDDL") (the "License"). You
    may not use this file except in compliance with the License. You can
    obtain a copy of the License at http://www.sun.com/cddl/cddl.html
    
    See the License for the specific language governing permissions and
    limitations under the License.  When distributing the software, include
    this License Header Notice in each file.  If applicable, add the following
    below the License Header, with the fields enclosed by brackets [] replaced
    by your own identifying information:
    
    "Portions Copyrighted 2011-2016 BiBiServ Curator Team, http://bibiserv.cebitec.uni-bielefeld.de"
    
    Contributor(s): Jan Krueger
    
    Authors: Jan Krueger, jkrueger(at)cebitec.uni-bielefeld.de
             Armin Toepfer, atoepfer(at)techfak.uni-bielefeld.de (initial release based on make)
     -->


<project name="instantbibi" basedir="." default="help" xmlns:antcontrib="antlib:net.sf.antcontrib"
    xmlns:ivy="antlib:org.apache.ivy.ant">

    <!-- load antlib for ant-contrib and ivy -->

    <path id="antlib">
        <fileset dir=".ant/lib">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <taskdef uri="antlib:net.sf.antcontrib" resource="net/sf/antcontrib/antlib.xml"
        classpathref="antlib"/>

    <taskdef uri="antlib:org.apache.ivy.ant" resource="org/apache/ivy/ant/antlib.xml"
        classpathref="antlib"/>



    <!-- getting access to environment vars -->
    <property environment="env"/>

    <!--  build conditions/dependencies -->

    <fail
        message="At least Java 7 is needed to compile '${ant.project.name}'. You are running ${java.version}, ${java.specification.version}, ${java.specification.name}">
        <condition>
            <not>
                <or>
                    <!-- any Java 7 release is supported -->
                    <equals arg1="${java.specification.version}" arg2="1.7" trim="yes"
                        casesensitive="no"/>
                    <!-- upcoming Java 8 release also supported -->
                    <equals arg1="${java.specification.version}" arg2="1.8" trim="yes"
                        casesensitive="no"/>
                </or>
            </not>
        </condition>
    </fail>



    <!-- following properties can be overwritten calling ant with -Dpropertyname=propertyvalue -->

    <property name="bibiserv_url" value="http://bibiserv.cebitec.uni-bielefeld.de"/>

    <property name="ant.lib.path" refid="antlib"/>
    <!-- for external ant calls -->


    <!-- Script to calculate the java db port and set the variable ${db.port} from the given portbase -->
    <scriptdef name="setPorts" language="javascript">
        <attribute name="portbase"/>
        <![CDATA[
        project.setNewProperty("db.port", (parseInt(attributes.get("portbase"))+27));
        project.setNewProperty("admin.port", (parseInt(attributes.get("portbase"))+48));
        project.setNewProperty("http.port", (parseInt(attributes.get("portbase"))+80));
        project.setNewProperty("https.port", (parseInt(attributes.get("portbase"))+81));
    ]]>
    </scriptdef>

    <!-- get information about host -->
    <hostinfo prefix="hostinfo"/>

    <target name="hostinfo" description="print information about host">
        <echo>NAME - ${hostinfo.NAME}</echo>
        <echo>DOMAIN - ${hostinfo.DOMAIN}</echo>
        <echo>IPv4 - ${hostinfo.ADDR4}</echo>
        <echo>IPv6 - ${hostinfo.ADDR6}</echo>
    </target>

    <target name="showconfig" description="shows current configuration" depends=".config.setting">
        <echo>Current configuration:</echo>
        <echo>base dir : ${base.dir}</echo>
        <echo>spool dir : ${spool.dir}</echo>
        <echo>exec dir : ${exec.dir}</echo>
        <echo>tool dir : ${tool.dir}</echo>
        <echo>portbase : ${portbase}</echo>
        <echo>db host : ${db.host}</echo>
        <echo>db user : ${db.user}</echo>
        <echo>db port : ${db.port}</echo>
        <echo>admin port : ${admin.port}</echo>
        <echo>http port : ${http.port}</echo>
        <echo>https port : ${https.port}</echo>

    </target>

    <target name="instant"
        description="create/configure GF, deploys bibimainapp using stable resources">
        <antcall target=".get"/>
        <antcall target=".unzip.config"/>
        <antcall target=".get.glassfish"/>
        <antcall target=".unzip.glassfish"/>
        <antcall target=".get.modules"/>
        <antcall target=".get.items"/>
        <antcall target=".create.config"/>
        <antcall target=".create.domain"/>
        <antcall target=".add.parts"/>
        <antcall target="start"/>
        <antcall target="showconfig"/>
    </target>

    <target name="instant.dev"
        description="setup a complete BiBiServ2 environment using latest developer resources from mercurial repository!">
        <antcall target=".mercurial"/>
        <antcall target=".get.glassfish"/>
        <antcall target=".unzip.glassfish"/>
        <antcall target=".get.modules"/>
        <antcall target=".get.items"/>
        <antcall target=".create.config"/>
        <antcall target=".create.domain"/>
        <antcall target=".add.parts"/>
        <antcall target="start"/>
        <antcall target="showconfig"/>
    </target>

    <target name="instant.environment"
            description="Setup a complete BiBiServ2 environment.">
        <antcall target=".get"/>
        <antcall target=".unzip.config"/>
        <antcall target=".get.glassfish"/>
        <antcall target=".unzip.glassfish"/>
        <antcall target=".get.modules"/>
        <antcall target=".get.items"/>
        <antcall target=".create.config"/>
        <antcall target=".create.domain"/>
        <antcall target=".add.parts"/>
        <ant antfile="build.xml" target="start" dir="appserver_config"/>
        <echo>Bibiserv2 environment created!</echo>
    </target>

    <target name="setup.domain" description="create and configure a new GF new domain">
        
        <antcall target=".get.glassfish"/>
        <antcall target=".unzip.glassfish"/>
        <antcall target=".get.config"/>
        <antcall target=".unzip.config"/>
        <antcall target=".create.config"/>
        <antcall target=".create.domain"/>
        <antcall target="showconfig"/>
    </target>

    <target name="rebuild.domain" depends="wipe.domain"
        description="rebuilds domain using previous configuration (if exists), depends on wipe.light">
        <antcall target=".create.domain"/>
        <antcall target=".add.parts"/>
        <antcall target="start"/>
        <antcall target="showconfig"/>
    </target>

    <target name=".docker.login">
        <property name="docker.url" value=""/>

        <input message="Please enter your dockerHub username:" addproperty="docker.username"/>
        <input message="Please enter your dockerHub password:" addproperty="docker.password">
            <handler classname="org.apache.tools.ant.input.SecureInputHandler" />
        </input>
        <input message="Please enter your dockerHub Organization where the images should be pushed:" addproperty="docker.organization"/>
        <exec executable="docker" failifexecutionfails="true" failonerror="true">
            <arg value="login"/>
            <arg value="--username"/>
            <arg value="${docker.username}"/>
            <arg value="--password"/>
            <arg value="${docker.password}"/>
            <arg value="${docker.url}"/>
        </exec>
    </target>

    <target name=".docker.image.info">
        <xmlproperty file="${dest}/download/runnableitem.xml"/>
        <property name="docker.image" value="${ns4:runnableItem.ns4:executable.ns4:execInfo.ns4:image}"/>
        <property name="docker.version" value="${ns4:runnableItem.ns4:executable.ns4:version}"/>
    </target>

    <target name=".docker.build" depends=".docker.image.info, .docker.login">
        <property name="dockerfileDir" value="${dest}/download"/>
        <fail message="Could not find a Dockerfile in the provided directory ${dockerfileDir}">
            <condition>
                <not>
                    <available file="${dockerfileDir}"/>
                </not>
            </condition>
        </fail>
        <property name="imageName" value="${docker.organization}/${docker.image}:${docker.version}" />
        <exec executable="docker"  failifexecutionfails="true" failonerror="true">
            <arg value="build"/>
            <arg value="--tag"/>
            <arg value="${docker.organization}/${docker.image}:${docker.version}"/>
            <arg value="${dockerfileDir}"/>
        </exec>
    </target>

    <target name=".docker.push" depends=".docker.image.info">
        <property name="imageName" value=""/>
        <exec executable="docker"  failifexecutionfails="true" failonerror="true">
            <arg value="push"/>
            <arg value="${imageName}"/>
        </exec>
    </target>

    <target name="deploy.docker" description="rebuilds domain using previous configuration (if exists), depends on wipe.light">
        <antcall target="deploy.github"/>
        <antcontrib:antcallback target=".docker.build" return="imageName" />
        <antcall target=".docker.push">
            <param name="imageName" value="${imageName}"/>
        </antcall>
        <delete dir="${dest}/download"/>
    </target>

    <target name="update.dev"
        description="updates appserver_config, bibimainapp, base from mercurial"
        depends=".mercurial"/>

    <target name="install.resource"
        description="install instantbibi as resource on bibiserv, could only be run with developer version from mercurial repository">

        <available property="is.developer.version" file=".hg/hgrc" value="true"/>

        <antcontrib:if>
            <isset property="is.developer.version"/>
            <antcontrib:then>
                <mkdir dir="dist"/>
                <zip destfile="dist/instantbibi.zip">
                    <zipfileset dir="." includes=".ant/lib/*" prefix="instantbibi"/>
                    <zipfileset file="build.xml" prefix="instantbibi"/>
                    <zipfileset file="ivy.xml" prefix="instantbibi"/>
                    <zipfileset file="README.1st" prefix="instantbibi"/>
                </zip>

                <checksum algorithm="md5" file="dist/instantbibi.zip" format="CHECKSUM"/>

                <!-- check if ${ssh.key} and ${ssh.user} is set -->
                <fail unless="ssh.user"
                    message="The Target &lt;install&gt; uses ssh key based authentication. Give the ssh user for ${ssh.host} as property 'ssh.user' as argument to the ant call!"/>
                <fail unless="ssh.key"
                    message="The Target &lt;install&gt; uses ssh key based authentication. Give the location of your private key as property 'ssh.key' and optional a passphrase as property 'ssh.passphrase' as argument to the ant call!"/>

                <!-- load ssh specify setting from bibiserv -->
                <property url="http://bibiserv.techfak.uni-bielefeld.de/ivy-rep/ivy_ssh.properties"/>


                <!-- copy local ivy-rep to bibiserv using porta.techfak.uni-bielefeld.de -->
                <scp todir="${ssh.user}@${ssh.host}:${ssh.basedir}/resources"
                    passphrase="${ssh.passphrase}" keyfile="${ssh.key}">
                    <fileset file="dist/instantbibi.zip"/>
                    <fileset file="dist/instantbibi.zip.md5"/>
                </scp>
            </antcontrib:then>
            <antcontrib:else>
                <echo>Target can only be run with developer version from mercurial
                    repository!</echo>
            </antcontrib:else>
        </antcontrib:if>
    </target>


    <target name="install.antlib"
        description="install needed ant libraries to ${user.home}/.ant/lib - mandatory for developer">
        <mkdir dir="${user.home}/.ant/lib"/>
        <copy todir="${user.home}/.ant/lib">
            <fileset dir=".ant/lib" includes="*.jar"/>
        </copy>
    </target>

    <target name="install.wizard" depends=".get.wizard, .config.setting"
        description="(re)deploys bibiserv2 wizard, application server must be running.">
        <exec executable="${basedir}/glassfish/bin/asadmin" failifexecutionfails="true"
            failonerror="true">
            <arg value="--user=admin"/>
            <arg value="--passwordfile=appserver_config/local.passwordfile"/>
            <arg value="--port=${admin.port}"/>
            <arg value="--host=localhost"/>
            <arg value="deploy"/>
            <arg value="--force"/>
            <arg value="--contextroot=/wizard"/>
            <arg value=".cache/wizard.war"/>
        </exec>
    </target>

    <target name="uninstall.wizard" depends=".config.setting"
        description="undeploy bibiserv2 wizard">
        <exec executable="${basedir}/glassfish/bin/asadmin" failifexecutionfails="true"
            failonerror="true">
            <arg value="--user=admin"/>
            <arg value="--passwordfile=appserver_config/local.passwordfile"/>
            <arg value="--port=${admin.port}"/>
            <arg value="--host=localhost"/>
            <arg value="undeploy"/>
            <arg value="wizard"/>
        </exec>
    </target>

    <target name="undeploy" depends=".config.setting" description="undeploy bibimainapp">
        <exec executable="${basedir}/glassfish/bin/asadmin" failifexecutionfails="true"
            failonerror="true">
            <arg value="--user=admin"/>
            <arg value="--passwordfile=appserver_config/local.passwordfile"/>
            <arg value="--port=${admin.port}"/>
            <arg value="--host=localhost"/>
            <arg value="undeploy"/>
            <arg value="bibimainapp"/>
        </exec>
    </target>

    <target name="start" description="start glassfish/database and deploys bibimainapp">
        <ant antfile="build.xml" target="start" dir="appserver_config"/>
        <antcall target="deploy"/>
        <echo>Server started and BiBiMainApp deployed ...</echo>
    </target>

    <target name="deploy" depends=".config.setting" description="(re)deploys bibimainapp">
        <antcontrib:if>
            <available file="bibimainapp"/>
            <antcontrib:then>
                <ant antfile="build.xml" target="dist" dir="bibimainapp"/>
                <exec executable="${basedir}/glassfish/bin/asadmin" failifexecutionfails="true"
                    failonerror="true">
                    <arg value="--user=admin"/>
                    <arg value="--passwordfile=appserver_config/local.passwordfile"/>
                    <arg value="--port=${admin.port}"/>
                    <arg value="--host=localhost"/>
                    <arg value="deploy"/>
                    <arg value="--force"/>
                    <arg value="--contextroot=/"/>
                    <arg value="bibimainapp/dist/bibimainapp.war"/>
                </exec>
            </antcontrib:then>
            <antcontrib:else>
                <exec executable="${basedir}/glassfish/bin/asadmin" failifexecutionfails="true"
                    failonerror="true">
                    <arg value="--user=admin"/>
                    <arg value="--passwordfile=appserver_config/local.passwordfile"/>
                    <arg value="--port=${admin.port}"/>
                    <arg value="--host=localhost"/>
                    <arg value="deploy"/>
                    <arg value="--force"/>
                    <arg value="--contextroot=/"/>
                    <arg value=".cache/bibimainapp.war"/>
                </exec>
            </antcontrib:else>
        </antcontrib:if>
    </target>

    <target name="stop" description="stops glassfish and database" depends=".config.setting">
        <antcontrib:if>
            <available file="${base.dir}/bibidomain"/>
            <antcontrib:then>
                <antcontrib:if>
                    <available file="appserver_config/local.configuration"/>
                    <antcontrib:then>
                        <ant antfile="build.xml" target="stop" dir="appserver_config"/>
                    </antcontrib:then>
                    <antcontrib:else>
                        <echo>No configuration found ... skip stopping glassfish and database</echo>
                    </antcontrib:else>
                </antcontrib:if>
            </antcontrib:then>
            <antcontrib:else>
                <echo>Domaindir ${base.dir}/bibidomain doesn't exists ... skip stopping glassfish and database</echo>
            </antcontrib:else>
        </antcontrib:if>

    </target>

    <target name="wipe.domain" depends=".config.setting, stop"
        description="stops GF and clean up domain including spool and exec dir">
        <delete dir="${spool.dir}"/>
        <!-- <delete dir="${exec.dir}"/> -->
        <delete dir="${base.dir}/bibidomain"/>
        <delete dir="${tools.dir}"/>
    </target>


    <target name="wipe" depends="wipe.domain"
        description="depends on wipe.domain and additional clean up domain configuration!">
        <delete dir="lib"/>
        <delete dir="." includes=".tmp.*/**"/>
        <delete file="instant.config"/>
    </target>

    <target name="wipe.all" depends="wipe"
        description="depends on wipe and additional remove all install directories">
        <delete dir="appserver_config"/>
        <delete dir="glassfish"/>
        <delete dir="base"/>
        <delete dir=".tmp" failonerror="no"/>
        <delete dir="bibimainapp" failonerror="no"/>
    </target>

    <target name="generate.github" description="Generate new project from github sources. Must contain runnableitem.xml in the root directory." >
        <fail unless="url">Please provide the Github url with -Durl=... </fail>
        <property name="release" value="master" />
        <fail unless="dest">Please provide the destination project directory with -Ddest=... </fail>
        <mkdir dir="${dest}/download"/>
        <get src="${url}/archive/${release}.zip" dest="${dest}/download"/>
        <unzip src="${dest}/download/${release}.zip" dest="${dest}/download">
            <cutdirsmapper dirs="1" />
        </unzip>

        <fail message="Could not find runnableitem.xml in repository root.">
            <condition>
                <not>
                    <available file="${dest}/download/runnableitem.xml"/>
                </not>
            </condition>
        </fail>

        <antcall target=".generate"/>
    </target>

    <target name=".generate" description="Generate a new project">
        <property name="xml" value="${dest}/download/runnableitem.xml"/>

        <exec  executable="java" failifexecutionfails="true"
              failonerror="true">
            <arg value="-jar"/>
            <arg value=".cache/codegen.jar"/>
            <arg value="-g"/>
            <arg value="${dest}/download/runnableitem.xml"/>
            <arg value="-p"/>
            <arg value="${dest}"/>
        </exec>
    </target>


    <target name=".deploy" description="Deploys a tool on the bibiserv">
        <exec executable="mvn" failifexecutionfails="true"
              failonerror="true">
            <arg value="package"/>
            <arg value="-f"/>
            <arg value="${dest}/pom.xml"/>
        </exec>
    </target>


    <target name="deploy.github" description="Deploys a tool hosted by Github on the bibiserv">
        <property name="xml" value="${dest}/download/runnableitem.xml"/>
        <antcall target="generate.github">
            <param name="xml" value="${xml}"/>
            <param name="project_dir" value="${dest}"/>
        </antcall>
        <antcall target=".deploy"/>
    </target>

    <!-- ######################## create and configure new domain   ########################### -->

    <target name=".add.parts">
        <ant antfile="build.xml" target="_start_db" dir="appserver_config">
            <property name="ant.library.path" value="${ant.lib.path}"/>
        </ant>

        <antcall target=".add.modules"/>
        <antcall target=".add.items"/>


        <ant antfile="build.xml" target="_stop_db" dir="appserver_config">
            <property name="ant.library.path" value="${ant.lib.path}"/>
        </ant>
    </target>

    <target name=".add.modules">
        <loadresource property="modullist">
            <file file=".cache/modules.txt"/>
        </loadresource>
        <antcontrib:for list="${modullist}" param="module" delimiter="${line.separator}">
            <sequential>
                <echo>add module "@{module}"</echo>
                <ant antfile="build.xml" target="install.module" dir="appserver_config">
                    <property name="module" value="${basedir}/.cache/@{module}"/>
                </ant>
            </sequential>
        </antcontrib:for>
    </target>

    <target name=".add.items">
        <loadresource property="itemlist">
            <file file=".cache/items.txt"/>
        </loadresource>
        <antcontrib:for list="${itemlist}" param="item" delimiter="${line.separator}">
            <sequential>
                <echo>add item "@{item}"</echo>
                <ant antfile="build.xml" target="install.item" dir="appserver_config">
                    <property name="item" value="${basedir}/.cache/@{item}"/>
                </ant>
            </sequential>
        </antcontrib:for>

    </target>

    <target name=".resources.setting">
        <antcontrib:if>
            <available file="resources.config"/>
            <antcontrib:then>
                <echo>use existing resources file ...</echo>
                <loadproperties srcFile="resources.config"/>
            </antcontrib:then>
            <antcontrib:else>
                <fail message="You have to provide a resources.config file"/>
            </antcontrib:else>
        </antcontrib:if>
    </target>

    <target name=".config.setting">
        <antcontrib:if>
            <available file="instant.config"/>
            <antcontrib:then>
                <echo>use existing configuration file ...</echo>
                <loadproperties srcFile="instant.config"/>
            </antcontrib:then>
            <antcontrib:else>
                <!-- create new configuration, remove possible existing configuration ind appserver_config -->
                <delete file="appserver_config/local.configuration" failonerror="no"/>
                <property name="portbase" value="8000"/>
                <setPorts portbase="${portbase}"/>
                <!-- db host -->
                <antcontrib:if>
                    <not>
                        <isset property="db.host"/>
                    </not>
                    <antcontrib:then>
                        <property name="db.host" value="${hostinfo.NAME}"/>
                    </antcontrib:then>
                </antcontrib:if>
                <!-- db user -->
                <property name="db.user" value="bibiserv2"/>
                <!-- db pwd -->
                <script language="javascript">
                    <![CDATA[
    property = project.setProperty("db.pwd","db_"+Math.floor((new Date()).getTime()/1000));
  ]]>
                </script>
                <property name="base.dir" value="/tmp/${user.name}"/>
                <property name="spool.dir" value="${base.dir}/spool"/>
                <property name="exec.dir" value="${base.dir}/bin"/>
                <property name="tool.dir" value="${base.dir}/gentools"/>
                <propertyfile file="instant.config">
                    <entry key="portbase" value="${portbase}"/>
                    <entry key="db.port" value="${db.port}"/>
                    <entry key="admin.port" value="${admin.port}"/>
                    <entry key="http.port" value="${http.port}"/>
                    <entry key="https.port" value="${https.port}"/>
                    <entry key="base.dir" value="${base.dir}"/>
                    <entry key="spool.dir" value="${spool.dir}"/>
                    <entry key="exec.dir" value="${exec.dir}"/>
                    <entry key="tool.dir" value="${tool.dir}"/>
                    <entry key="db.host" value="${db.host}"/>
                    <entry key="db.user" value="${db.user}"/>
                    <entry key="db.pwd" value="${db.pwd}"/>
                </propertyfile>
                <!-- change permission -->
                <chmod file="instant.config" perm="600"/>

            </antcontrib:else>
        </antcontrib:if>
    </target>

    <target name=".create.domain" depends=".create.config, .create.bibimainapp.pwfile, .check">
        <available file="${base.dir}/bibidomain" property="domain.present"/>
        <antcontrib:if>
            <isset property="domain.present"/>
            <antcontrib:then>
                <echo>found previous installed and configured domain ...</echo>
            </antcontrib:then>
            <antcontrib:else>
                <ant antfile="build.xml" target="configure" dir="appserver_config">
                    <property name="ant.library.path" value="${ant.lib.path}"/>
                </ant>
            </antcontrib:else>
        </antcontrib:if>
    </target>

    <target name=".create.config" depends=".config.setting">
        <antcontrib:if>
            <not>
                <available file="appserver_config/local.configuration" property="config.present"
                    value="true"/>
            </not>
            <antcontrib:then>
                <echo>create configuration </echo>
                <!-- local configuration -->
                <propertyfile file="appserver_config/local.configuration">
                    <entry key="catalina.home" value="${basedir}/glassfish"/>
                    <entry key="domain.dir" value="${base.dir}"/>
                    <entry key="domain" value="bibidomain"/>
                    <entry key="admin.user" value="admin"/>
                    <entry key="spool.dir" value="${spool.dir}"/>
                    <entry key="executable.dir" value="${exec.dir}"/>
                    <entry key="server.portbase" value="${portbase}"/>
                    <entry key="db.port" value="${db.port}"/>
                    <entry key="admin.port" value="${admin.port}"/>
                    <entry key="db.host" value="${db.host}"/>
                    <entry key="db.user" value="${db.user}"/>
                    <entry key="db.pwd" value="${db.pwd}"/>
                </propertyfile>
                <!-- change permission on local.configuration file -->
                <chmod file="appserver_config/local.passwordfile" perm="600"/>
                <!-- local passwordfile -->
                <propertyfile file="appserver_config/local.passwordfile">
                    <entry key="AS_ADMIN_PASSWORD" value="admin"/>
                    <entry key="AS_ADMIN_MASTERPASSWORD" value="changeit"/>
                </propertyfile>
                <!-- change permission on password file -->
                <chmod file="appserver_config/local.passwordfile" perm="600"/>

            </antcontrib:then>
            <antcontrib:else>
                <echo>found previous configuration ...</echo>
            </antcontrib:else>
        </antcontrib:if>
        
        <!-- check if all ports available -->
        <antcontrib:if>
            <socket server="localhost" port="${http.port}"/>
            <antcontrib:then>
                <property name="port_used" value="true"/>
                <echo>HTTP port (${http.port}) is already in use !</echo>
            </antcontrib:then>
        </antcontrib:if>
        
        <antcontrib:if>
            <socket server="localhost" port="${https.port}"/>
            <antcontrib:then>
                <property name="port_used" value="true"/>
                <echo>HTTPS port (${https.port}) is already in use !</echo>
            </antcontrib:then>
        </antcontrib:if>
        
        <antcontrib:if>
            <socket server="localhost" port="${admin.port}"/>
            <antcontrib:then>
                <property name="port_used" value="true"/>
                <echo>ADMIN port (${admin.port}) is already in use !</echo>
            </antcontrib:then>
        </antcontrib:if>
        
        <antcontrib:if>
            <socket server="localhost" port="${db.port}"/>
            <antcontrib:then>
                <property name="port_used" value="true"/>
                <echo>DB port (${db.port}) is already in use !</echo>
            </antcontrib:then>
        </antcontrib:if>
        
        
        <antcontrib:if>
            <isset property="port_used"/>
            <antcontrib:then>
                <echo>At least on port (see previous log message) needed by current configuration is in use by another process. Abbort!</echo>
                <fail>Port(s) already in use ...</fail>
            </antcontrib:then>
        </antcontrib:if>
    </target>

    <target name=".create.bibimainapp.pwfile" depends=".config.setting">
        <tstamp>
            <format property="CURRENT" pattern="MMddyyyy_hhmm"/>
        </tstamp>
        <antcontrib:if>
            <available file="${user.home}/.bibiserv2_manager"/>
            <antcontrib:then>
                <input
                    message="Found previous BiBiServ2 ManagerClient configuration (${user.home}/.bibiserv2_manager)!\nShould this configuration overwritten - previous configuration will be moved to ${user.home)/.bibiserv2_manager.${CURRENT} (y/n)?"
                    validargs="y,n" addproperty="do.overwrite"/>
            </antcontrib:then>
        </antcontrib:if>
        <antcontrib:if>
            <or>
                <not>
                    <available file="${user.home}/.bibiserv2_manager"/>
                </not>
                <and>
                    <isset property="do.overwrite"/>
                    <equals forcestring="yes" trim="yes" arg1="${do.overwrite}" arg2="y"/>
                </and>
            </or>
            <antcontrib:then>
                <move file="${user.home}/.bibiserv2_manager"
                    tofile="${user.home}/.bibiserv2_manager.${CURRENT}" failonerror="false"/>
                <propertyfile file="${user.home}/.bibiserv2_manager">
                    <entry key="role" value="testadmin"/>
                    <entry key="password" value="b9dfac81fa1e0516aab7feef882c1f97d13ca2cc"/>
                    <!-- sha1 : simplepassword -->
                    <entry key="port" value="${https.port}"/>
                    <entry key="server" value="${db.host}"/>
                    <!-- this is ok since db.host == domain.host -->
                    <entry key="ssl" value="true"/>
                </propertyfile>
            </antcontrib:then>
        </antcontrib:if>
    </target>



    <target name=".check">
        <antcontrib:if>
            <available file="${base.dir}"/>
            <antcontrib:then>
                <echo>${base.dir} exist ... </echo>
                <touch file="${base.dir}/ok"/>
            </antcontrib:then>
            <antcontrib:else>
                <echo>Create ${base.dir} ...</echo>
                <mkdir dir="${base.dir}"/>
            </antcontrib:else>
        </antcontrib:if>
        <antcontrib:if>
            <and>
                <available file="${spool.dir}"/>
                <available file="${spoold.dir}/tmp"/>
            </and>
            <antcontrib:then>
                <echo>${spool.dir} exist ...</echo>
                <touch file="${spool.dir}/ok"/>
                <touch file="${spool.dir}/tmp/ok"/>
            </antcontrib:then>
            <antcontrib:else>
                <echo>Create ${spool.dir} &amp; ${spool.dir}/tmp ...</echo>
                <mkdir dir="${spool.dir}"/>
                <mkdir dir="${spool.dir}/tmp"/>
            </antcontrib:else>
        </antcontrib:if>
        <antcontrib:if>
            <available file="${exec.dir}"/>
            <antcontrib:then>
                <echo>${exec.dir} exist ...</echo>
                <touch file="${exec.dir}/ok"/>

            </antcontrib:then>
            <antcontrib:else>
                <echo>Create ${exec.dir} ... </echo>
                <mkdir dir="${exec.dir}"/>
            </antcontrib:else>
        </antcontrib:if>
        <antcontrib:if>
            <available file="${tool.dir}"/>
            <antcontrib:then>
                <echo>${tool.dir} exist ...</echo>
                <touch file="${tool.dir}/ok"/>
            </antcontrib:then>
            <antcontrib:else>
                <echo>Create ${tool.dir} ... </echo>
                <mkdir dir="${tool.dir}"/>
            </antcontrib:else>
        </antcontrib:if>
    </target>

    <!-- ######################## mercurial clone/update ############################## -->

    <target name=".mercurial">
        <checkandclone project="appserver_config"/>
        <checkandclone project="base"/>
        <checkandclone project="bibimainapp"/>
    </target>

    <macrodef name="checkandclone" description="clone / update mercurial">
        <attribute name="project"/>
        <attribute name="url" default="ssh://hg@hg.cebitec.uni-bielefeld.de"/>
        <attribute name="path" default="/bibiadm/bibiserv2/main"/>
        <sequential>
            <antcontrib:if>
                <available file="@{project}"/>
                <antcontrib:then>
                    <antcontrib:if>
                        <available file="@{project}/.hg"/>
                        <antcontrib:then>
                            <exec executable="hg" dir="@{project}" failifexecutionfails="true"
                                failonerror="true">
                                <arg value="pull"/>
                            </exec>
                            <exec executable="hg" dir="@{project}" failifexecutionfails="true"
                                failonerror="true">
                                <arg value="update"/>
                            </exec>
                        </antcontrib:then>
                        <antcontrib:else>
                            <echo>Existing @{project} without mercurial support found ...</echo>
                        </antcontrib:else>
                    </antcontrib:if>
                </antcontrib:then>
                <antcontrib:else>
                    <exec executable="hg" failifexecutionfails="true" failonerror="true">
                        <arg value="clone"/>
                        <arg value="@{url}/@{path}/@{project}"/>
                    </exec>
                </antcontrib:else>
            </antcontrib:if>
        </sequential>
    </macrodef>


    <!-- ######################## unzip downloaded sources  ########################### -->

    <target name=".unzip.config">
        <!-- appserver config -->
        <unzipResource resource=".cache/appserver_config.zip" depdir="appserver_config"/>
    </target>

    <target name=".unzip.glassfish">
        <antcontrib:if>
            <isset property="glassfish3"/>
            <antcontrib:then>
                <unzipResource resource=".cache/glassfish-3.1.2.2.zip" depdir="glassfish"/>
                <antcontrib:if>
                    <available file="glassfish3"/>
                    <antcontrib:then>
                        <move file="glassfish3" tofile="glassfish"/>
                    </antcontrib:then>
                </antcontrib:if>
            </antcontrib:then>
            <antcontrib:else>
                <unzipResource resource=".cache/glassfish-4.1.zip" depdir="glassfish"/>
                <antcontrib:if>
                    <available file="glassfish4"/>
                    <antcontrib:then>
                        <move file="glassfish4" tofile="glassfish"/>
                    </antcontrib:then>
                </antcontrib:if>
            </antcontrib:else>

        </antcontrib:if>
        <chmod perm="ugo+rx" file="glassfish/bin/asadmin"/>
        <chmod perm="ugo+rx" file="glassfish/javadb/bin/ij"/>
    </target>

    <macrodef name="unzipResource">
        <attribute name="resource"/>
        <attribute name="depdir"/>
        <attribute name="dest" default="@{depdir}"/>
        <sequential>
            <antcontrib:if>
                <available file="@{depdir}"/>
                <antcontrib:then>
                    <echo>found previous @{depdir} installation ...</echo>
                </antcontrib:then>
                <antcontrib:else>
                    <mkdir dir="@{depdir}"/>
                    <unzip src="@{resource}" dest="@{depdir}">
                        <cutdirsmapper dirs="1" />
                    </unzip>
                    <move todir="@{depdir}" verbose="true">
                        <fileset dir="@{depdir}">
                            <include name="/./**"/>
                        </fileset>
                    </move>
                </antcontrib:else>
            </antcontrib:if>
        </sequential>
    </macrodef>

    <!-- ######################## targets to download sources from server ########################### -->

    <target name=".get" >
        <antcall target=".get.codegen"/>
        <antcall target=".get.bibimainapp"/>
    </target>

    <target name=".get.bibimainapp" depends=".get.config,.resources.setting">
        <checkAndDownload url="${bibimainapp}" dest="bibimainapp.war"/>
    </target>

    <target name=".get.config" depends=".resources.setting">
        <checkAndDownload url="${server_config}"  dest="appserver_config.zip"/>
    </target>

    <target name=".get.codegen" depends=".resources.setting">
        <checkAndDownload url="${codegen}"  dest="codegen.jar"/>
        <chmod file=".cache/codegen.jar" perm="770"/>
    </target>

    <target name=".get.wizard" depends=".resources.setting">
        <checkAndDownload url="${wizard}"  dest="wizard.war"/>
    </target>

    <target name=".get.glassfish">
        <antcontrib:if>
            <isset property="glassfish3"/>
            <antcontrib:then>
                <checkAndDownload dest="glassfish-3.1.2.2.zip" url="${bibiserv_url}/resources/glassfish-3.1.2.2.zip"/>
            </antcontrib:then>
            <antcontrib:else>
                <checkAndDownload dest="glassfish-4.1.zip" url="${bibiserv_url}/resources/glassfish-4.1.zip"/>
            </antcontrib:else>
        </antcontrib:if>
    </target>

    <target name=".get.modules">
        <antcontrib:if>
            <isset property="use.min.module.set"/>
            <antcontrib:then>
                <get src="${bibiserv_url}/resources/modules/modules-minimal.txt" dest=".cache/modules.txt"/>
            </antcontrib:then>
            <antcontrib:else>
                <get src="${bibiserv_url}/resources/modules/modules.txt" dest=".cache/modules.txt"/>
            </antcontrib:else>
        </antcontrib:if>
        
        <loadresource property="modullist">
            <file file=".cache/modules.txt"/>
        </loadresource>
        <antcontrib:for list="${modullist}" param="module" delimiter="${line.separator}">
            <sequential>
                <echo>@{module}</echo>
                <checkAndDownload dest="@{module}" url="${bibiserv_url}/resources/modules/@{module}"/>
            </sequential>
        </antcontrib:for>
    </target>
    <target name=".get.items">
        <get src="${bibiserv_url}/resources/items/items.txt" dest=".cache/items.txt"/>
        <loadresource property="itemlist">
            <file file=".cache/items.txt"/>
        </loadresource>
        <antcontrib:for list="${itemlist}" param="item" delimiter="${line.separator}">
            <sequential>
                <echo>@{item}</echo>
                <checkAndDownload dest="@{item}" url="${bibiserv_url}/resources/items/@{item}"/>
            </sequential>
        </antcontrib:for>
    </target>

    <macrodef name="checkAndDownload"
        description="check if a resource is cached and up to date, otherwise download it from given url">
        <attribute name="url"/>
        <attribute name="dest"/>
        <sequential>
            <antcontrib:if>
                <available file=".cache/@{dest}"/>
                <antcontrib:then>
                    <echo>Resource is already downloaded</echo>
                </antcontrib:then>
                <antcontrib:else>
                    <echo>Download resource from ${url}</echo>
                    <mkdir dir=".cache"/>
                    <get src="@{url}" dest=".cache/@{dest}"/>
                </antcontrib:else>
            </antcontrib:if>
        </sequential>
    </macrodef>

    <!-- ######################## help ########################### -->
    <target name="help" description="print out a help message (same as ant -p)">
        <echo>Main targets: 
            deploy              (re)deploys bibimainapp
            deploy.app          deploy an application from repository on server (-Dapp=ID_OF_APP)
            deploy.docker       deploy bibiserv tool hosted on github (-Durl=github-url) (-Drelease=release) (-Ddest=destination-path).
                                The repository must contain a dockerfile
            undeploy.app        undeploy any application from server (-Dapp=ID_OF_APP)
            
            help                print out a help message (same as ant -p) 
            
            install.antlib      install needed ant libraries to ${user.home}/.ant/lib - mandatory
                                for developer 
            install.resource    install instantbibi as resource on bibiserv, could only be run with developer version
                                from mercurial repository
            install.wizard      (re)deploys the bibiserv2 wizard on glassfish
            instant             create/configure GF, deploys bibimainapp using stable resources
            instant.environment set up the bibiserv environment without starting the bibimainapp
            list.apps           list all available apps located in bibiserv repository

            showconfig          shows current configuration start start glassfish/database and
                                deploys bibimainapp stop stops glassfish and database 
            wipe                stops GF and clean up domain including spool and exec dir!
            wipe.all            depends on wipe and remove install directories
            
            Default target: help 
            
            Configuration can individualized setting properties, following properties are supported : 
            
            name             | description                                   | defaultvalue 
            bibiserv_url        | BiBiServ resource url                         | ${bibiserv_url} 
            glassfish_url       | GlassFish resource url                        | ${glassfish_url}
            base.dir            | base dir                                      | ${base.dir} comment : /tmp/$${user.name} 
            spool.dir           | spool dir                                     | ${spool.dir} comment : $${base.dir}/spool 
            exec.dir            | executation dir (for binaries)                | ${exec.dir} comment : $${base.dir}/bin 
            tool.dir            | generated tool project dir                    | ${tool.dir} comment : $${base.dir}/gentools 
            portbase            | glassfish port base                           | 8000 
                                |                                               | (http: +80, https: +81) | 
            db.port             | database port                                 | 8027 comment : $${portbase} + 27
            admin.port          | administration port                           | 8048 comment : $${portbase} + 48 
                                |                                               |
            glassfish3          | use GF3.1.2 instead of 4                      | unset 
            config.64           | enables 64Bit support                         | unset
                                | Needs an 64 Bit capable OS/JVM !
            config.oge          | enables OGE support                           | unset
                                | Needs an installed and configured OGE environmet and
                                | additional  properties set :  drmaa.jar, drmaa.library.path
             + drmaa.jar        | points to a drmaa Java library fitting for installed  OGE
             + drmaa.library.path | points to  drmaa library path, where OGE shared objects are installed
                                |                                               |
            use.min.module.set  | use minimal module set                        | unset
            
            Example : ant -Dportbase=9000 -Dbase.dir=/vol/bibiserv2
            instant Setup a new bibiserv2 instance with port base 9000 (-> http:9080, https:9081,
            admin:9048, db:9027) and /vol/bibiserv2 as base dir. </echo>
    </target>

    <!-- ######################## tools ########################### -->
    
    <target name="deploy.app" description="deploy application" depends=".config.setting,.resolve">
        
      <fail unless="app">You have to define an application to deploy using -Dapp=APPNAME</fail>
                
        <mkdir dir=".tmp"/>
        <!-- get bar from server -->
        <get src="${bibiserv_url}/resources/apps/${app}.bar" dest=".tmp"/>
        
        
        <!-- deploy bar archive to server -->
        <java classname="de.unibi.cebitec.bibiserv.client.manager.ManagerClient" fork="true">
            <classpath>
                <fileset dir="lib">
                    <include name="*.jar"/>
                </fileset>
            </classpath>
            <arg value="deploy"/>
            <arg value=".tmp/${app}.bar"/>
        </java>
        
        <!-- remove bar -->
        <delete file=".tmp/${app}.bar"/>
    </target>
    
    
    <target name="undeploy.app" description="undeploy an application" depends=".config.setting,.resolve">
        <fail unless="app">You have to define an application to deploy using -Dapp=APPNAME</fail>
        
        <!-- undeploy app from server-->
        <java classname="de.unibi.cebitec.bibiserv.client.manager.ManagerClient" fork="true">
            <classpath>
                <fileset dir="lib">
                    <include name="*.jar"/>
                </fileset>
            </classpath>
            <arg value="undeploy"/>
            <arg value="${app}"/>
        </java>
    </target>
    
    
    <target name="list.apps" description="list all applications available from BiBiServ repository">
        <mkdir dir=".tmp"/>
        <get src="${bibiserv_url}/resources/apps/" dest=".tmp"/>
        <replaceregexp file=".tmp/apps"
            match=".+href=&quot;(.+?)\.bar.+"
            replace="\1"
            byline="true"
        />
        <loadfile
            property="list.apps"
            srcFile=".tmp/apps">
            <filterchain>
                <linecontains negate="true">
                    <contains value="&lt;"/>
                </linecontains>
            </filterchain>
        </loadfile>
        <echo>List of available apps:</echo>
        <echo>${list.apps}</echo>
        <delete file=".tmp/apps"/>
    </target>


    <!-- ######################## ivy dependencies ########################### -->

    <!-- use ivy to resolve  library dependencies -->
    <target name=".resolve">
        <ivy:settings url="http://bibiserv.techfak.uni-bielefeld.de/ivy-rep/ivysettings.xml"/>
        <ivy:retrieve/>
    </target>



</project>
